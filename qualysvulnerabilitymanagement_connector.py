# File: qualysvulnerabilitymanagement_connector.py
#
# Copyright (c) 2022 Splunk Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software distributed under
# the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
# either express or implied. See the License for the specific language governing permissions
# and limitations under the License.

from __future__ import print_function, unicode_literals

import json

import phantom.app as phantom
import requests
import xmltodict
from bs4 import BeautifulSoup
from phantom.action_result import ActionResult
from phantom.base_connector import BaseConnector

from qualysvulnerabilitymanagement_consts import *


class RetVal(tuple):

    def __new__(cls, val1, val2=None):
        return tuple.__new__(RetVal, (val1, val2))


class QualysVulnerabilityManagementConnector(BaseConnector):

    def __init__(self):

        # Call the BaseConnectors init first
        super(QualysVulnerabilityManagementConnector, self).__init__()

        self._state = None
        self._base_url = None
        self.username = None
        self.password = None

    def _process_empty_response(self, response, action_result):
        if response.status_code == 200:
            return RetVal(phantom.APP_SUCCESS, {})

        return RetVal(
            action_result.set_status(
                phantom.APP_ERROR, "Empty response and no information in the header"
            ), None
        )

    def _process_html_response(self, response, action_result):
        # An html response, treat it like an error
        status_code = response.status_code

        try:
            soup = BeautifulSoup(response.text, "html.parser")
            error_text = soup.text
            split_lines = error_text.split('\n')
            split_lines = [x.strip() for x in split_lines if x.strip()]
            error_text = '\n'.join(split_lines)
        except:
            error_text = "Cannot parse error details"

        message = "Status Code: {0}. Data from server:\n{1}\n".format(status_code, error_text)

        message = message.replace(u'{', '{{').replace(u'}', '}}')
        return RetVal(action_result.set_status(phantom.APP_ERROR, message), None)

    def _process_xml_response(self, r, action_result):
        resp_xml = None
        try:
            if r.text:
                resp_xml = xmltodict.parse(r.text)
        except Exception as e:
            error_message = self._get_error_message_from_exception(e)
            return RetVal(
                action_result.set_status(
                    phantom.APP_ERROR,
                    "Unable to parse XML response. Error: {0}".format(error_message)
                )
            )

        if 200 <= r.status_code < 400:
            return RetVal(phantom.APP_SUCCESS, resp_xml)
        error_code = resp_xml.get("SIMPLE_RETURN").get('RESPONSE').get('CODE', '')
        error_message = resp_xml.get("SIMPLE_RETURN").get('RESPONSE').get('TEXT', '')

        message = "Error from server. Status Code: {0} Data from server: {1}. {2}".format(
            r.status_code, error_code, error_message
        )

        return RetVal(action_result.set_status(phantom.APP_ERROR, message), resp_xml)

    def _process_json_response(self, r, action_result):
        # Try a json parse
        try:
            resp_json = r.json()
        except Exception as e:
            return RetVal(
                action_result.set_status(
                    phantom.APP_ERROR, "Unable to parse JSON response. Error: {0}".format(str(e))
                ), None
            )

        # Please specify the status codes here
        if 200 <= r.status_code < 399:
            return RetVal(phantom.APP_SUCCESS, resp_json)

        # You should process the error returned in the json
        message = "Error from server. Status Code: {0} Data from server: {1}".format(
            r.status_code,
            r.text.replace(u'{', '{{').replace(u'}', '}}')
        )

        return RetVal(action_result.set_status(phantom.APP_ERROR, message), None)

    def _process_response(self, r, action_result):
        # store the r_text in debug data, it will get dumped in the logs if the action fails
        if hasattr(action_result, 'add_debug_data'):
            action_result.add_debug_data({'r_status_code': r.status_code})
            action_result.add_debug_data({'r_text': r.text})
            action_result.add_debug_data({'r_headers': r.headers})

        # Process each 'Content-Type' of response separately

        # Process a json response
        if 'json' in r.headers.get('Content-Type', ''):
            return self._process_json_response(r, action_result)

        if "xml" in r.headers.get("Content-Type", ""):
            return self._process_xml_response(r, action_result)

        if 'html' in r.headers.get('Content-Type', ''):
            return self._process_html_response(r, action_result)

        if not r.text:
            return self._process_empty_response(r, action_result)

        message = "Can't process response from server. Status Code: {0} Data from server: {1}".format(
            r.status_code,
            r.text.replace('{', '{{').replace('}', '}}')
        )

        return RetVal(action_result.set_status(phantom.APP_ERROR, message), None)

    def _validate_integer(self, action_result, parameter, key, allow_zero=False):
        """
        Validate an integer.

        :param action_result: Action result or BaseConnector object
        :param parameter: input parameter
        :param key: input parameter message key
        :allow_zero: whether zero should be considered as valid value or not
        :return: status phantom.APP_ERROR/phantom.APP_SUCCESS, integer value of the parameter or None in case of failure
        """
        if parameter is not None:
            try:
                if not float(parameter).is_integer():
                    return action_result.set_status(phantom.APP_ERROR, QUALYS_VALID_INTEGER_MSG.format(param=key)), None

                parameter = int(parameter)
            except Exception:
                return action_result.set_status(phantom.APP_ERROR, QUALYS_VALID_INTEGER_MSG.format(param=key)), None

            if parameter < 0:
                return action_result.set_status(phantom.APP_ERROR, QUALYS_NON_NEGATIVE_INTEGER_MSG.format(param=key)), None
            if not allow_zero and parameter == 0:
                return action_result.set_status(phantom.APP_ERROR, QUALYS_POSITIVE_INTEGER_MSG.format(param=key)), None

        return phantom.APP_SUCCESS, parameter

    def _make_rest_call(self, endpoint, action_result, method="get", **kwargs):
        # **kwargs can be any additional parameters that requests.request accepts

        config = self.get_config()

        resp_json = None

        try:
            request_func = getattr(requests, method)
        except AttributeError:
            return RetVal(
                action_result.set_status(phantom.APP_ERROR, "Invalid method: {0}".format(method)),
                resp_json
            )

        # Create a URL to connect to
        url = self._base_url + endpoint
        try:
            r = request_func(
                url,
                auth=(self.username, self.password),
                verify=config.get('verify_server_cert', False),
                timeout=DEFAULT_TIMEOUT,
                **kwargs
            )
        except Exception as e:
            return RetVal(
                action_result.set_status(
                    phantom.APP_ERROR, "Error Connecting to server. Details: {0}".format(str(e))
                ), resp_json
            )

        return self._process_response(r, action_result)

    def _validate_csv(self, param, key):

        params = param.get(key)
        if params:
            params = [x.strip() for x in params.split(",")]
            params = list(filter(None, params))
        return params

    def _handle_test_connectivity(self, param):

        action_result = self.add_action_result(ActionResult(dict(param)))

        params = {
            "action": "list"
        }

        headers = {
            "X-Requested-With": "phantom test connectivity"
        }

        self.save_progress("Connecting to endpoint")

        ret_val, response = self._make_rest_call(
            '/api/2.0/fo/auth', action_result, params=params, headers=headers
        )

        if phantom.is_fail(ret_val):
            self.save_progress("Test Connectivity Failed.")
            return action_result.get_status()

        self.save_progress("Test Connectivity Passed")
        return action_result.set_status(phantom.APP_SUCCESS)

    def _handle_list_asset_groups(self, param):

        self.save_progress("In action handler for: {0}".format(self.get_action_identifier()))

        action_result = self.add_action_result(ActionResult(dict(param)))

        ids = self._validate_csv(param, 'ids')
        truncation_limit = param.get('truncation_limit', 1000)

        ret_val, truncation_limit = self._validate_integer(action_result, truncation_limit, 'truncation_limit', True)
        if phantom.is_fail(ret_val):
            return ret_val

        self.debug_print("ids and trunction_limit: {}-{}".format(ids, truncation_limit))

        params = {
            "action": "list",
            "truncation_limit": truncation_limit
        }

        if ids:
            params['ids'] = ids

        headers = {
            "X-Requested-With": "phantom list asset groups"
        }
        ret_val, response = self._make_rest_call(
            '/api/2.0/fo/asset/group/', action_result, params=params, headers=headers
        )

        if phantom.is_fail(ret_val):
            return action_result.get_status()

        self.debug_print("asset_group_response: {}".format(response))
        response = response["ASSET_GROUP_LIST_OUTPUT"]["RESPONSE"]

        summary = action_result.update_summary({})
        if response.get("ASSET_GROUP_LIST"):
            response = response["ASSET_GROUP_LIST"]
            if not isinstance(response["ASSET_GROUP"], list):
                action_result.add_data(response["ASSET_GROUP"])
                summary['asset_groups'] = len(response)
            else:
                for data in response["ASSET_GROUP"]:
                    action_result.add_data(data)
                summary['asset_groups'] = len(response["ASSET_GROUP"])
        else:
            summary['asset_groups'] = "not found"

        return action_result.set_status(phantom.APP_SUCCESS)

    def _handle_list_hosts(self, param):
        self.save_progress("In action handler for: {0}".format(self.get_action_identifier()))

        action_result = self.add_action_result(ActionResult(dict(param)))

        ag_ids = self._validate_csv(param, 'ag_ids')
        ips = self._validate_csv(param, 'ips')
        vm_scan_date_before = param.get('vm_scan_date_before')
        vm_scan_date_after = param.get('vm_scan_date_after')
        truncation_limit = param.get('truncation_limit', 1000)

        ret_val, truncation_limit = self._validate_integer(action_result, truncation_limit, 'truncation_limit', True)
        if phantom.is_fail(ret_val):
            return ret_val

        params = {
            'action': 'list',
            'show_asset_id': 1,
            'truncation_limit': truncation_limit,
        }

        if ag_ids:
            params['ag_ids'] = ag_ids

        if ips:
            params['ips'] = ips

        if vm_scan_date_before:
            params['vm_scan_date_before'] = vm_scan_date_before

        if vm_scan_date_after:
            params['vm_scan_date_after'] = vm_scan_date_after

        headers = {
            "X-Requested-With": "phantom list hosts"
        }
        ret_val, response = self._make_rest_call(
            '/api/2.0/fo/asset/host/', action_result, params=params, headers=headers
        )

        if phantom.is_fail(ret_val):
            return action_result.get_status()

        response = response["HOST_LIST_OUTPUT"]["RESPONSE"]

        summary = action_result.update_summary({})
        if response.get("HOST_LIST"):
            response = response["HOST_LIST"]
            if not isinstance(response["HOST"], list):
                action_result.add_data(response["HOST"])
                summary['found_hosts'] = len(response)
            else:
                for data in response["HOST"]:
                    action_result.add_data(data)
                summary['found_hosts'] = len(response["HOST"])
        else:
            summary['asset_groups'] = "not found"
        return action_result.set_status(phantom.APP_SUCCESS)

    def _handle_launch_scan(self, param):
        self.save_progress("In action handler for: {0}".format(self.get_action_identifier()))

        action_result = self.add_action_result(ActionResult(dict(param)))

        type = param.get('type')
        scan_title = param.get('scan_title')
        ip = self._validate_csv(param, 'ip')
        asset_group_ids = self._validate_csv(param, 'asset_group_ids')
        exclude_ip_per_scan = self._validate_csv(param, 'exclude_ip_per_scan')
        iscanner_id = param.get('iscanner_id')
        option_id = param.get('option_id')
        priority = param.get('priority', "0")

        params = {
            'action': 'launch',
        }

        if scan_title:
            params['scan_title'] = scan_title

        if ip:
            params['ip'] = ip

        if asset_group_ids:
            params['asset_group_ids'] = asset_group_ids

        if exclude_ip_per_scan:
            params['exclude_ip_per_scan'] = exclude_ip_per_scan

        if iscanner_id:
            params['iscanner_id'] = iscanner_id

        if option_id:
            params['option_id'] = option_id

        if type.lower() == 'vm' and priority:
            params['priority'] = priority

        headers = {
            "X-Requested-With": "phantom launch scan"
        }

        method = 'post'
        if type.lower() == 'vm':
            endpoint = '/api/2.0/fo/scan/'
        elif type.lower() == 'compliance':
            endpoint = '/api/2.0/fo/scan/compliance/'

        ret_val, response = self._make_rest_call(
            endpoint, action_result, method=method, params=params, headers=headers
        )

        if phantom.is_fail(ret_val):
            return action_result.get_status()

        if response["SIMPLE_RETURN"]["RESPONSE"].get("ITEM_LIST"):
            response = response["SIMPLE_RETURN"]["RESPONSE"]["ITEM_LIST"]
        else:
            error_code = response.get("SIMPLE_RETURN").get('RESPONSE').get('CODE', '')
            error_message = response.get("SIMPLE_RETURN").get('RESPONSE').get('TEXT', '')
            message = "Data from server: {}. {}".format(error_code, error_message)
            return action_result.set_status(phantom.APP_ERROR, message)

        summary = action_result.update_summary({})
        action_result.add_data(response)
        summary['status'] = "{} scan Launched successfully".format(type)

        return action_result.set_status(phantom.APP_SUCCESS)

    def handle_action(self, param):
        ret_val = phantom.APP_SUCCESS

        # Get the action that we are supposed to execute for this App Run
        action_id = self.get_action_identifier()

        self.debug_print("action_id", self.get_action_identifier())

        if action_id == 'test_connectivity':
            ret_val = self._handle_test_connectivity(param)

        if action_id == 'list_asset_groups':
            ret_val = self._handle_list_asset_groups(param)

        if action_id == 'launch_scan':
            ret_val = self._handle_launch_scan(param)

        if action_id == 'list_hosts':
            ret_val = self._handle_list_hosts(param)

        return ret_val

    def initialize(self):
        # Load the state in initialize, use it to store data
        # that needs to be accessed across actions
        self._state = self.load_state()

        # get the asset config
        config = self.get_config()
        """
        # Access values in asset config by the name

        # Required values can be accessed directly
        required_config_name = config['required_config_name']

        # Optional values should use the .get() function
        optional_config_name = config.get('optional_config_name')
        """

        self._base_url = config.get('base_url').rstrip(r"/|\\")
        self.username = config.get('username')
        self.password = config.get('password')

        return phantom.APP_SUCCESS

    def finalize(self):
        # Save the state, this data is saved across actions and app upgrades
        self.save_state(self._state)
        return phantom.APP_SUCCESS


def main():
    import argparse

    argparser = argparse.ArgumentParser()

    argparser.add_argument('input_test_json', help='Input Test JSON file')
    argparser.add_argument('-u', '--username', help='username', required=False)
    argparser.add_argument('-p', '--password', help='password', required=False)

    args = argparser.parse_args()
    session_id = None

    username = args.username
    password = args.password

    if username is not None and password is None:

        # User specified a username but not a password, so ask
        import getpass
        password = getpass.getpass("Password: ")

    if username and password:
        try:
            login_url = QualysVulnerabilityManagementConnector._get_phantom_base_url() + '/login'

            print("Accessing the Login page")
            r = requests.get(login_url, verify=False)
            csrftoken = r.cookies['csrftoken']

            data = dict()
            data['username'] = username
            data['password'] = password
            data['csrfmiddlewaretoken'] = csrftoken

            headers = dict()
            headers['Cookie'] = 'csrftoken=' + csrftoken
            headers['Referer'] = login_url

            print("Logging into Platform to get the session id")
            r2 = requests.post(login_url, verify=False, data=data, headers=headers)
            session_id = r2.cookies['sessionid']
        except Exception as e:
            print("Unable to get session id from the platform. Error: " + str(e))
            exit(1)

    with open(args.input_test_json) as f:
        in_json = f.read()
        in_json = json.loads(in_json)
        print(json.dumps(in_json, indent=4))

        connector = QualysVulnerabilityManagementConnector()
        connector.print_progress_message = True

        if session_id is not None:
            in_json['user_session_token'] = session_id
            connector._set_csrf_info(csrftoken, headers['Referer'])

        ret_val = connector._handle_action(json.dumps(in_json), None)
        print(json.dumps(json.loads(ret_val), indent=4))

    exit(0)


if __name__ == '__main__':
    main()
